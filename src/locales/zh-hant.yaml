# SPDX-License-Identifier: MIT

displayName: 簡體中文
language: 語言
close: 關閉

theme: 主題
theme.dark: 深色模式
theme.purple: 紫色
theme.green: 綠色
theme.default: 默認

nav: 導航
nav.home: 首頁
nav.api: API

# 類型表格頭
api.var: 變量
api.type: 類型
api.value: 值
api.description: 描述

api.request: 請求
api.header: 報頭
api.query: 查詢參數
api.param: 路徑參數
api.body: 報文
api.response: 返回
api.callback: 回調
api.example: 示例代碼

# 過濾
filter.method: 請求方法
filter.tag: 標簽
filter.server: 服務

error.url-empty: URL 不能為空
error.apidoc-empty: apidoc 文檔內容為空
error.api-empty: apidoc 文檔中沒有 API 文檔

# type 開頭的是文檔中有關類型描述的相關內容
#
# NOTE: type 下的翻譯內容都可以是 HTML，會作自動轉換

# 表頭信息
type.table.header.name: 名稱
type.table.header.type: 類型
type.table.header.required: 必填
type.table.header.description: 描述

# apidoc.yaml
type.apidoc.yaml: |
  <p>配置文件名固定為 <code>.apidoc.yaml</code>，格式為 YAML，可參考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。
  文件可以通過命令行參數 <code>-d</code> 生成。主要包含了以幾個配置項：</p>
type.apidoc.yaml.version: 產生此配置文件的 apidoc 版本
type.apidoc.yaml.inputs: 指定輸入的數據，同壹項目只能解析壹種語言。
type.apidoc.yaml.inputs.dir: 需要解析的源文件所在目錄
type.apidoc.yaml.inputs.recursive: 是否解析子目錄下的源文件
type.apidoc.yaml.inputs.encoding: |
  編碼。默認為 <code>utf-8</code>，
  值可以是 <a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">character-sets</a> 中的內容。
type.apidoc.yaml.inputs.lang: 源文件類型。具體支持的類型可通過 -l 參數進行查找
type.apidoc.yaml.output: 控制輸出行為
type.apidoc.yaml.output.path: 指定輸出的文件名，包含路徑信息。
type.apidoc.yaml.output.tags: 只輸出與這些標簽相關聯的文檔，默認為全部。
type.apidoc.yaml.output.style: 為 XML 文件指定的 XSL 文件。

# apidoc
type.apidoc: <p>用於描述整個文檔的相關內容，只能出現壹次。</p>
type.apidoc.@version: 文檔的版本
type.apidoc.@lang: 內容的本地化 ID，比如 <code>zh-hans</code> 等。
type.apidoc.@logo: 圖標
type.apidoc.@created: 文檔的生成時間
type.apidoc.title: 文檔的標題
type.apidoc.description: 文檔的整體介紹，可以是使用 HTML 內容。
type.apidoc.contact: 聯系人信息
type.apidoc.license: 內容的版權信息
type.apidoc.tag: 可以用的標簽列表
type.apidoc.server: API 基地址列表，每個 API 最少應該有壹個 server。
type.apidoc.response: 表示所有 API 都有可能返回的內容
type.apidoc.api: API 文檔內容

# link
type.link: <p>用於描述鏈接，壹般轉換為 HTML 的 a 標簽。</p>
type.link.@url: 鏈接指向的 URL
type.link..: 鏈接的文本內容

# contact
type.contact: <p>用於描述聯系方式</p>
type.contact.@url: 鏈接的 URL，與郵箱必須二選壹必填
type.contact.@email: 郵件地址，與 url 必須二選壹必填
type.contact..: 聯系人名稱

# tag
type.tag: <p>定義標簽，標簽相當於關鍵字，作用於 API，相當於啟到分類的作用。</p>
type.tag.@name: 標簽的唯壹 ID，推薦采用英文字母表示。
type.tag.@title: 標簽名稱
type.tag.@deprecated: 表示該標簽在大於等於該版本號時不再啟作用

# server
type.server: <p>定義服務器的相關信息，作用於 API，決定該 API 與哪個服務器相關聯。</p>
type.server.@name: 唯壹 ID，推薦采用英文字母表示。
type.server.@url: 服務基地址
type.server.@deprecated: 表示在大於等於該版本號時不再啟作用
type.server..: 對該服務的具體描述，可以使用 HTML 內容

# api
type.api: <p>定義接口的具體內容</p>
type.api.@version: 表示此接口在該版本中添加
type.api.@method: 請求方法
type.api.@summary: 簡要介紹
type.api.@deprecated: 表示在大於等於該版本號時不再啟作用
type.api.@id: 唯壹 ID
type.api.description: 該接口的詳細介紹，為 HTML 內容。
type.api.path: 定義路徑信息
type.api.request: 定義可用的請求信息
type.api.response: 定義可能的返回信息
type.api.callback: 定義回調接口內容
type.api.tag: 關聯的標簽
type.api.server: 關聯的服務
type.api.header: 傳遞的報頭內容，如果是某個 mimetype 專用的，可以放在 request 元素中。

# path
type.path: <p>用於定義請求時與路徑相關的內容</p>
type.path.@path: 接口地址
type.path.param: 地址中的參數
type.path.query: 地址中的查詢參數

# request
type.request: <p>定義了請求和返回的相關內容</p>
type.request.@name: 當 mimetype XML 時，此值表示 XML 的頂層元素名稱，否則無用。
type.request.@type: 值的類型，可以是 string、number、bool 和 object
type.request.@deprecated: 表示在大於等於該版本號時不再啟作用
type.request.@summary: 簡要介紹
type.request.@array: 是否為數組
type.request.@status: 狀態碼。在 request 中，該值不可用，否則為必填項。
type.request.@mimetype: 媒體類型，比如 <code>application/json</code> 等。
type.request.description: 詳細介紹，為 HTML 內容。
type.request.enum: 當前參數可用的枚舉值
type.request.param: 子類型，比如對象的子元素。
type.request.example: 示例代碼。
type.request.header: 傳遞的報頭內容

# param
type.param: 參數類型
type.param.@name: 值的名稱
type.param.@type: 值的類型，可以是 string、number、bool 和 object
type.param.@deprecated: 表示在大於等於該版本號時不再啟作用
type.param.@default: 默認值
type.param.@optional: 是否為可選的參數
type.param.@summary: 簡要介紹
type.param.@array: 是否為數組
type.param.description: 詳細介紹，為 HTML 內容。
type.param.enum: 當前參數可用的枚舉值
type.param.param: 子類型，比如對象的子元素。

# enum
type.enum: <p>定義枚舉類型的數所的枚舉值</p>
type.enum.@value: 枚舉值
type.enum.@deprecated: 表示在大於等於該版本號時不再啟作用
type.enum..: 該值的詳細介紹

# example
type.example: <p>示例代碼</p>
type.example.@mimetype: 代碼的 mimetype 類型。
type.example..: 示例代碼的內容，需要使用 CDATA 包含代碼。

# header
type.header: <p>定義了請求和返回的報頭結構</p>
type.header.@name: 報頭的名稱
type.header.@deprecated: 表示在大於等於該版本號時不再啟作用
type.header.@summary: 對報頭的描述
type.header.description: 對報頭的描述

# callback
type.callback: <p>定義接口回調的相關內容</p>
type.callback.@method: 請求方法
type.callback.@summary: 簡要介紹
type.callback.@deprecated: 表示在大於等於該版本號時不再啟作用
type.callback.description: 該接口的詳細介紹
type.callback.path: 定義路徑信息
type.callback.request: 定義可用的請求信息
type.callback.response: 定義可能的返回信息

# version
type.version: |
  <p>版本號格式，遵循 <a href="https://semver.org/lang/zh-CN/">semver</a> 的規則。
  比如 <samp>1.1.1</samp>、<samp>0.1.0</samp> 等。</p>


doc.intro: 簡介
doc.intro.content: |
  <p>apidoc 是壹個簡單的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文檔生成工具，它從代碼註釋中提取特定格式的內容生成文檔。支持諸如 Go、Java、C++、Rust 等大部分開發語言，具體可使用 <code>apidoc -l</code> 命令行查看所有的支持列表。</p>

  <p>apidoc 擁有以下特點：</p>
  <ol>
      <li>跨平臺，linux、windows、macOS 等都支持；</li>
      <li>支持語言廣泛，即使是不支持，也很方便擴展；</li>
      <li>支持多個不同語言的多個項目生成壹份文檔；</li>
      <li>輸出模板可自定義；</li>
  </ol>

  <p>以下是壹段簡短的 C 語言風格代碼下的示例：</p>
  <pre>/**
   * &lt;api method="GET" summary="獲取所有的用戶信息"&gt;
   *     &lt;path path="/users"&gt;
   *         &lt;query name="page" type="number" default="0"&gt;顯示第幾頁的內容&lt;/query&gt;
   *         &lt;query name="size" type="number" default="20"&gt;每頁顯示的數量&lt;/query&gt;
   *     &lt;/path&gt;
   *     &lt;tag&gt;user&lt;/tag&gt;
   *     &lt;server&gt;users&lt;/server&gt;
   *     &lt;response status="200" type="object" mimetype="application/json"&gt;
   *         &lt;param name="count" type="int" optional="false" summary="符合條件的所有用戶數量" /&gt;
   *         &lt;param name="users" type="object" array="true" summary="用戶列表"&gt;
   *             &lt;param name="id" type="int" summary="唯壹 ID" /&gt;
   *             &lt;param name="name" type="string" summary="姓名" /&gt;
   *         &lt;/param&gt;
   *     &lt;/response&gt;
   *     &lt;response status="500" mimetype="application/json" type="obj"&gt;
   *         &lt;param name="code" type="int" summary="錯誤代碼" /&gt;
   *         &lt;param name="msg" type="string" summary="錯誤內容" /&gt;
   *     &lt;/response&gt;
   * &lt;/api&gt;
   */</pre>
  <p>多行註釋中，每壹行中以<code>空白字符+symbol+空白字符</code>開頭的，這些字符將會被過濾，symbol 表示該註釋塊的起始字符中的任意字符。比如以上代碼中，所有的 <var>*</var> 將被過濾。</p>

doc.usage: 使用
doc.usage.install: 安裝
doc.usage.install.content: |
  <p>可以直接從 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找妳需要的版本下載，放入 <code>PATH</code> 中即可使用。如果沒有妳需要的平臺文件，則需要從源代碼編譯：</p>
  <ul>
      <li>下載 Go 編譯工具</li>
      <li>下載源代碼</li>
      <li>執行代碼中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 進行編譯</li>
      <li>編譯好的文件存放在 cmd/apidoc 下，可以將該文件放置在 PATH 目錄</li>
  </ul>

doc.usage.env: 環境變量
doc.usage.env.content: |
  <p>apidoc 會讀取 <var>LANG</var> 的環境變量作為其本地化的依據，若想指定其它語種，可以手動指定 <var>LANG</var> 環境變量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系統中，若不存在 <var>LANG</var> 環境變量，則會調用 <samp>GetUserDefaultLocaleName</samp> 函數來獲取相應的語言信息。</p>

doc.usage.cli: 命令行
doc.usage.cli.content: |
  <p>可以通過 <code>apidoc -h</code> 查看命令行支持的參數。主要包含了以下幾個參數：</p>
  <table>
      <thead><tr><th>參數</th><th>描述</th></tr></thead>
      <tbody>
          <tr><td>-h</td><td>顯示幫助信息</td></tr>
          <tr><td>-v</td><td>顯示版本信息</td></tr>
          <tr><td>-l</td><td>列出當前支持的語言</td></tr>
          <tr><td>-d</td><td>根據指定的目錄生成配置文件</td></tr>
          <tr><td>-t</td><td>檢測語法是否準確</td></tr>
      </tbody>
  </table>

doc.spec: 文檔
doc.spec.content: |
  <p>文檔采用 XML 格式。存在兩個頂級標簽：<code>apidoc</code> 和 <code>api</code>，用於描述整體內容和具體接口信息。</p>

  <p>文檔被從註釋中提取之後，最終會被合並成壹個 XML 文件，在該文件中 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素存在，如果妳的項目不想把文檔寫在註釋中，也可以直接編寫壹個完整的 XML 文件，將 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素。</p>

  <p>具體可參考<a href="./example/index.xml">示例代碼</a>。</p>

  <p>以下是對各個 XML 元素以及參數介紹，其中以 <code>@</code> 開頭的表示 XML 屬性；<code>.</code> 表示為當前元素的內容；其它表示子元素。</p>


# about 頁面內容

about.about: 關於
about.about.content: |
  <p>apidoc.tools 為 apidoc 的官方網站，提供了對文檔格式的介紹以及 <abbr title="Application Programming Interface">API</abbr> 文件的查看等功能。代碼拖管於 <a href="https://github.com/caixw/apidoc">Github.com</a>。</p>
