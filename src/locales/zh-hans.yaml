# SPDX-License-Identifier: MIT

displayName: 简体中文
language: 语言

load.invalid-url: 无效的文件地址

theme: 主题
theme.dark: 深色模式
theme.purple: 紫色
theme.green: 绿色
theme.default: 默认

nav: 导航
nav.home: 首页
nav.api: API
nav.about: 关于

# 类型表格头
api.var: 变量
api.type: 类型
api.value: 值
api.description: 描述

api.request: 请求
api.header: 报头
api.query: 查询参数
api.param: 路径参数
api.body: 报文
api.response: 返回
api.callback: 回调

# type 开头的是文档中有关类型描述的相关内容
#
# NOTE: type 下的翻译内容都可以是 HTML，会作自动转换

# 表头信息
type.table.header.name: 名称
type.table.header.type: 类型
type.table.header.required: 必填
type.table.header.description: 描述

# apidoc.yaml
type.apidoc.yaml: |
  <p>配置文件名固定为 <code>.apidoc.yaml</code>，格式为 YAML，可参考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。
  文件可以通过命令行参数 <code>-d</code> 生成。主要包含了以几个配置项：</p>
type.apidoc.yaml.version: 产生此配置文件的 apidoc 版本
type.apidoc.yaml.inputs: 指定输入的数据，同一项目只能解析一种语言。
type.apidoc.yaml.inputs.dir: 需要解析的源文件所在目录
type.apidoc.yaml.inputs.recursive: 是否解析子目录下的源文件
type.apidoc.yaml.inputs.encoding: |
  编码。默认为 <code>utf-8</code>，
  值可以是 <a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml">character-sets</a> 中的内容。
type.apidoc.yaml.inputs.lang: 源文件类型。具体支持的类型可通过 -l 参数进行查找
type.apidoc.yaml.output: 控制输出行为
type.apidoc.yaml.output.path: 指定输出的文件名，包含路径信息。
type.apidoc.yaml.output.tags: 只输出与这些标签相关联的文档，默认为全部。
type.apidoc.yaml.output.style: 为 XML 文件指定的 XSL 文件。

# apidoc
type.apidoc: <p>用于描述整个文档的相关内容，只能出现一次。</p>
type.apidoc.@version: 文档的版本
type.apidoc.@lang: 内容的本地化 ID，比如 <code>zh-hans</code> 等。
type.apidoc.@logo: 图标
type.apidoc.@created: 文档的生成时间
type.apidoc.title: 文档的标题
type.apidoc.description: 文档的整体介绍，可以是使用 HTML 内容。
type.apidoc.contact: 联系人信息
type.apidoc.license: 内容的版权信息
type.apidoc.tag: 可以用的标签列表
type.apidoc.server: API 基地址列表，每个 API 最少应该有一个 server。
type.apidoc.response: 表示所有 API 都有可能返回的內容
type.apidoc.api: API 文档内容

# link
type.link: <p>用于描述链接，一般转换为 HTML 的 a 标签。</p>
type.link.@url: 链接指向的 URL
type.link..: 链接的文本内容

# contact
type.contact: <p>用于描述联系方式</p>
type.contact.@url: 链接的 URL，与邮箱必须二选一必填
type.contact.@email: 邮件地址，与 url 必须二选一必填
type.contact..: 联系人名称

# tag
type.tag: <p>定义标签，标签相当于关键字，作用于 API，相当于启到分类的作用。</p>
type.tag.@name: 标签的唯一 ID，推荐采用英文字母表示。
type.tag.@title: 标签名称
type.tag.@deprecated: 表示该标签在大于等于该版本号时不再启作用

# server
type.server: <p>定义服务器的相关信息，作用于 API，决定该 API 与哪个服务器相关联。</p>
type.server.@name: 唯一 ID，推荐采用英文字母表示。
type.server.@url: 服务基地址
type.server.@deprecated: 表示在大于等于该版本号时不再启作用
type.server..: 对该服务的具体描述，可以使用 HTML 内容

# api
type.api: <p>定义接口的具体内容</p>
type.api.@version: 表示此接口在该版本中添加
type.api.@method: 请求方法
type.api.@summary: 简要介绍
type.api.@deprecated: 表示在大于等于该版本号时不再启作用
type.api.@id: 唯一 ID
type.api.description: 该接口的详细介绍，为 HTML 内容。
type.api.path: 定义路径信息
type.api.request: 定义可用的请求信息
type.api.response: 定义可能的返回信息
type.api.callback: 定义回调接口内容
type.api.tag: 关联的标签
type.api.server: 关联的服务
type.api.header: 传递的报头内容，如果是某个 mimetype 专用的，可以放在 request 元素中。

# path
type.path: <p>用于定义请求时与路径相关的内容</p>
type.path.@path: 接口地址
type.path.param: 地址中的参数
type.path.query: 地址中的查询参数

# request
type.request: <p>定义了请求和返回的相关内容</p>
type.request.@name: 当 mimetype XML 时，此值表示 XML 的顶层元素名称，否则无用。
type.request.@type: 值的类型，可以是 string、number、bool 和 object
type.request.@deprecated: 表示在大于等于该版本号时不再启作用
type.request.@summary: 简要介绍
type.request.@array: 是否为数组
type.request.@status: 状态码。在 request 中，该值不可用，否则为必填项。
type.request.@mimetype: 媒体类型，比如 <code>application/json</code> 等。
type.request.description: 详细介绍，为 HTML 内容。
type.request.enum: 当前参数可用的枚举值
type.request.param: 子类型，比如对象的子元素。
type.request.example: 示例代码。
type.request.header: 传递的报头内容

# param
type.param: 参数类型
type.param.@name: 值的名称
type.param.@type: 值的类型，可以是 string、number、bool 和 object
type.param.@deprecated: 表示在大于等于该版本号时不再启作用
type.param.@default: 默认值
type.param.@optional: 是否为可选的参数
type.param.@summary: 简要介绍
type.param.@array: 是否为数组
type.param.description: 详细介绍，为 HTML 内容。
type.param.enum: 当前参数可用的枚举值
type.param.param: 子类型，比如对象的子元素。

# enum
type.enum: <p>定义枚举类型的数所的枚举值</p>
type.enum.@value: 枚举值
type.enum.@deprecated: 表示在大于等于该版本号时不再启作用
type.enum..: 该值的详细介绍

# example
type.example: <p>示例代码</p>
type.example.@mimetype: 代码的 mimetype 类型。
type.example..: 示例代码的内容，需要使用 CDATA 包含代码。

# header
type.header: <p>定义了请求和返回的报头结构</p>
type.header.@name: 报头的名称
type.header.@deprecated: 表示在大于等于该版本号时不再启作用
type.header.@summary: 对报头的描述
type.header.description: 对报头的描述

# callback
type.callback: <p>定义接口回调的相关内容</p>
type.callback.@method: 请求方法
type.callback.@summary: 简要介绍
type.callback.@deprecated: 表示在大于等于该版本号时不再启作用
type.callback.description: 该接口的详细介绍
type.callback.path: 定义路径信息
type.callback.request: 定义可用的请求信息
type.callback.response: 定义可能的返回信息

# version
type.version: |
  <p>版本号格式，遵循 <a href="https://semver.org/lang/zh-CN/">semver</a> 的规则。
  比如 <samp>1.1.1</samp>、<samp>0.1.0</samp> 等。</p>


doc.intro: 简介
doc.intro.content: |
  <p>apidoc 是一个简单的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 <code>apidoc -l</code> 命令行查看所有的支持列表。</p>

  <p>apidoc 拥有以下特点：</p>
  <ol>
      <li>跨平台，linux、windows、macOS 等都支持；</li>
      <li>支持语言广泛，即使是不支持，也很方便扩展；</li>
      <li>支持多个不同语言的多个项目生成一份文档；</li>
      <li>输出模板可自定义；</li>
  </ol>

  <p>以下是一段简短的 C 语言风格代码下的示例：</p>
  <pre>/**
   * &lt;api method="GET" summary="获取所有的用户信息"&gt;
   *     &lt;path path="/users"&gt;
   *         &lt;query name="page" type="number" default="0"&gt;显示第几页的内容&lt;/query&gt;
   *         &lt;query name="size" type="number" default="20"&gt;每页显示的数量&lt;/query&gt;
   *     &lt;/path&gt;
   *     &lt;tag&gt;user&lt;/tag&gt;
   *     &lt;server&gt;users&lt;/server&gt;
   *     &lt;response status="200" type="object" mimetype="application/json"&gt;
   *         &lt;param name="count" type="int" optional="false" summary="符合条件的所有用户数量" /&gt;
   *         &lt;param name="users" type="object" array="true" summary="用户列表"&gt;
   *             &lt;param name="id" type="int" summary="唯一 ID" /&gt;
   *             &lt;param name="name" type="string" summary="姓名" /&gt;
   *         &lt;/param&gt;
   *     &lt;/response&gt;
   *     &lt;response status="500" mimetype="application/json" type="obj"&gt;
   *         &lt;param name="code" type="int" summary="错误代码" /&gt;
   *         &lt;param name="msg" type="string" summary="错误内容" /&gt;
   *     &lt;/response&gt;
   * &lt;/api&gt;
   */</pre>
  <p>多行注释中，每一行中以<code>空白字符+symbol+空白字符</code>开头的，这些字符将会被过滤，symbol 表示该注释块的起始字符中的任意字符。比如以上代码中，所有的 <var>*</var> 将被过滤。</p>

doc.usage: 使用
doc.usage.install: 安装
doc.usage.install.content: |
  <p>可以直接从 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找你需要的版本下载，放入 <code>PATH</code> 中即可使用。如果没有你需要的平台文件，则需要从源代码编译：</p>
  <ul>
      <li>下载 Go 编译工具</li>
      <li>下载源代码</li>
      <li>执行代码中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 进行编译</li>
      <li>编译好的文件存放在 cmd/apidoc 下，可以将该文件放置在 PATH 目录</li>
  </ul>

doc.usage.env: 环境变量
doc.usage.env.content: |
  <p>apidoc 会读取 <var>LANG</var> 的环境变量作为其本地化的依据，若想指定其它语种，可以手动指定 <var>LANG</var> 环境变量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系统中，若不存在 <var>LANG</var> 环境变量，则会调用 <samp>GetUserDefaultLocaleName</samp> 函数来获取相应的语言信息。</p>

doc.usage.cli: 命令行
doc.usage.cli.content: |
  <p>可以通过 <code>apidoc -h</code> 查看命令行支持的参数。主要包含了以下几个参数：</p>
  <table>
      <thead><tr><th>参数</th><th>描述</th></tr></thead>
      <tbody>
          <tr><td>-h</td><td>显示帮助信息</td></tr>
          <tr><td>-v</td><td>显示版本信息</td></tr>
          <tr><td>-l</td><td>列出当前支持的语言</td></tr>
          <tr><td>-d</td><td>根据指定的目录生成配置文件</td></tr>
          <tr><td>-t</td><td>检测语法是否准确</td></tr>
      </tbody>
  </table>

doc.spec: 文档
doc.spec.content: |
  <p>文档采用 XML 格式。存在两个顶级标签：<code>apidoc</code> 和 <code>api</code>，用于描述整体内容和具体接口信息。</p>

  <p>文档被从注释中提取之后，最终会被合并成一个 XML 文件，在该文件中 <code>api</code> 作为 <code>apidoc</code> 的一个子元素存在，如果你的项目不想把文档写在注释中，也可以直接编写一个完整的 XML 文件，将 <code>api</code> 作为 <code>apidoc</code> 的一个子元素。</p>

  <p>具体可参考<a href="./example/index.xml">示例代码</a>。</p>

  <p>以下是对各个 XML 元素以及参数介绍，其中以 <code>@</code> 开头的表示 XML 属性；<code>.</code> 表示为当前元素的内容；其它表示子元素。</p>


# about 页面内容

about.about: 关于
about.about.content: |
    <p>apidoc.tools 为 apidoc 的官方网站，提供了对文档格式的介绍以及 <abbr title="Application Programming Interface">API</abbr> 文件的查看等功能。代码拖管于 <a href="https://github.com/caixw/apidoc">Github.com</a>。</p>

